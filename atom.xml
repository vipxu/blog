<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>清减半夏时光</title>
  <icon>https://www.gravatar.com/avatar/87d6305f905fb69a041471db21132792</icon>
  <subtitle>偷得浮生半日闲</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://vipxu.github.io/"/>
  <updated>2018-06-05T09:34:01.219Z</updated>
  <id>https://vipxu.github.io/</id>
  
  <author>
    <name>许广文</name>
    <email>326531916@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>天青色等烟雨</title>
    <link href="https://vipxu.github.io/2018/06/05/%E5%A4%A9%E9%9D%92%E8%89%B2%E7%AD%89%E7%83%9F%E9%9B%A8/"/>
    <id>https://vipxu.github.io/2018/06/05/天青色等烟雨/</id>
    <published>2018-06-05T07:46:01.000Z</published>
    <updated>2018-06-05T09:34:01.219Z</updated>
    
    <content type="html"><![CDATA[<p>信步江南中的你，一曲东风破，一首美人歌。人生，只是一个过客，来的匆匆，去的匆匆，没有想过为谁而停泊。当时间定格，你的前世，你的今生，该是在莺飞草长里过了千年。</p><p>曲折的小巷，芭蕉骤雨，敲打着青石板，回音空灵。惹了门环上的斑驳铜绿。朱漆的大门，在岁月的侵蚀下，闪着隐隐的血色。你在轩窗里，寥寥数笔，勾勒出几朵牡丹，含苞，待放。细想着初见时的她，佳人初妆，俏比花娇艳。晕开的月色，看不透结局，顺带了青花澄澈。晚风轻扬,飘荡白衣，翻飞思绪。遥记招摇酒旗.杏花春雨，桃红柳带绿。酒不醉而自伤情，琴无弦而有音。</p><p>哪个落魄女子，扶按银筝，轻敲澶板，一曲无稽散漫，只是声调凄婉。柳，失了轻烟，落红飘谢。念念不忘的那个人，早已消失在茫茫人海，徒留着耳畔，花香一缕。你依然描青花，绘锦鲤，心里惦着的，确非宋体隶书的飘逸。永远的等待，也是一种结局，没有开始，就没有结束。满目的心伤，独自凄凉,独自哀伤。窗外杨花点点，朝暮恰似离人泪。江南的缠绵悱恻，到了人的心底，纠结不清。想是本来就没有承诺，谁也不用负担什么。</p><p>再见时，又是一年的夭桃盛，其华灼灼，云中可蕊多。春荣有迹，秋谢无影。而她，已是往年花中的绚丽一枝，上落碧穷，下黄泉，生生相错。恍惚中。子夜迷歌，看不尽的忘川河。商时的风，唐时的雨，宋朝的墨迹，染遍了疏离。你凝视着青灯古壁，将微笑隐在树的枝末上，任夜雨霖铃，时日犹长。人生若只如初见，怕是当时只道是寻常。浮世寻常的爱恋，选在了错误的时间，地点，没有错过一世的繁华，却错过了她。心底的荒芜，蔓延上三月的草长，亦是枉然。<br>冉冉澶香透过窗，终少了歌舞红袖，锦瑟流光。你修长的指间，拂过釉色苍茫。青花瓷如玉，欲坠下泪来，在青色的天空下，抖落一地的轻颤。宣纸上的画影离乱，花开欲然，渐渐模糊了，如初亮的黎明，迅速抽空了焦距。<br>梦，埋进江南的烟雨。你残破的记忆，该是错过的人，追忆的人，最好的叹息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;信步江南中的你，一曲东风破，一首美人歌。人生，只是一个过客，来的匆匆，去的匆匆，没有想过为谁而停泊。当时间定格，你的前世，你的今生，该是在莺飞草长里过了千年。&lt;/p&gt;
&lt;p&gt;曲折的小巷，芭蕉骤雨，敲打着青石板，回音空灵。惹了门环上的斑驳铜绿。朱漆的大门，在岁月的侵蚀下，闪着
      
    
    </summary>
    
      <category term="随笔" scheme="https://vipxu.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://vipxu.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Js字符串常用方法</title>
    <link href="https://vipxu.github.io/2018/06/03/js%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>https://vipxu.github.io/2018/06/03/js字符串基本操作/</id>
    <published>2018-06-03T07:46:01.000Z</published>
    <updated>2018-06-08T10:55:54.528Z</updated>
    
    <content type="html"><![CDATA[<p>1.concat() – 将两个或多个字符的文本组合起来，返回一个新的字符串</p><p>result=s1+s2+…+s<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;Hello&quot;;</span><br><span class="line">var out = str.concat(&quot; World&quot;,&quot;!&quot;);</span><br><span class="line">console.log(str); //Hello</span><br><span class="line">console.log(out); //Hello World!</span><br></pre></td></tr></table></figure></p><p>2.charAt() – 返回指定位置的字符。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;HelloString&quot;;</span><br><span class="line">var out = str.charAt(1);</span><br><span class="line">console.log(out); //e</span><br></pre></td></tr></table></figure><p>3.<strong>charCodeAt()</strong> – 返回在指定的位置的字符的 Unicode 编码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;HelloString&quot;;</span><br><span class="line">var out = str.charCodeAt(5);</span><br><span class="line">console.log(out); //83</span><br></pre></td></tr></table></figure><p>4.<strong>indexOf(searchvalue,fromindex)</strong> – 返回字符串中一个子串第一处出现的索引，如果没有匹配项，返回 -1 。<br>fromindex是可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。<br>如省略该参数，则将从字符串的首字符开始检索,此时indexOf()跟search()方法类似。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;HelloStringend&quot;;</span><br><span class="line">console.log(str.indexOf(&quot;e&quot;)); //1</span><br><span class="line">console.log(str.indexOf(&quot;e&quot;,2)); //11</span><br></pre></td></tr></table></figure><p>5.<strong>lastIndexOf(searchvalue,fromindex)</strong> – 返回字符串中一个子串最后一处出现的索引，如果没有匹配项，返回 -1 。<br>如果在 stringObject 中的 fromindex 位置之前存在 searchvalue，则返回的是出现的最后一个 searchvalue 的位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;HelloString&quot;;</span><br><span class="line">console.log(str.lastIndexOf(&quot;l&quot;)); //3</span><br><span class="line">console.log(str.lastIndexOf(&quot;l&quot;, 1)); //-1</span><br><span class="line">console.log(str.lastIndexOf(&quot;l&quot;, 2)); //2</span><br><span class="line">console.log(str.lastIndexOf(&quot;l&quot;, 3)); //3</span><br></pre></td></tr></table></figure><p>6.<strong>substring(start,end)</strong> – 返回一个新的字符串,包括 start 处的字符,但不包括 end 处的字符,其长度为 end 减 start<br>substring是以两个参数中较小一个作为起始位置，较大的参数作为结束位置。</p><p><strong>注意：如果参数是负数，substring则会将负参数都直接转换为0，如果仅有一个参数，则从start开始到末尾。 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;HelloExample&quot;;</span><br><span class="line">console.log(str); //HelloExample</span><br><span class="line">console.log(str.substring(1, 3)); //el</span><br><span class="line">console.log(str.substring(3, 1)); //el</span><br><span class="line">console.log(str.substring(2)); //lloExample</span><br><span class="line">console.log(str.substring(-1)); //HelloExample</span><br><span class="line">console.log(str.substring(-1, -3)); //空字符串</span><br><span class="line">console.log(str.substring(-1, 5)); //Hello</span><br></pre></td></tr></table></figure></p><p>7.<strong>substr(start [,length])</strong> – 返回一个新的字符串,从起始索引号提取字符串中指定数目的字符。<br>如果仅有一个参数，则从start开始到末尾。<br> 当接收的参数是负数时,substr是将第一个参数与字符串长度相加后的结果作为第一个参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;HelloExample&quot;;</span><br><span class="line">console.log(str); //HelloExample</span><br><span class="line">console.log(str.substr(1, 3)); //ell</span><br><span class="line">console.log(str.substr(2, -1)); //空字符串</span><br><span class="line">console.log(str.substr(1)); //elloExample</span><br><span class="line">console.log(str.substr(-4, 2)); //mp</span><br><span class="line">console.log(str.substr(-3)); //ple</span><br></pre></td></tr></table></figure><p>8.<strong>stringObject.slice(start,end)</strong> 返回一个新的字符串,包括 start 处的字符,但不包括 end 处的字符,其长度为 end 减 start<br>当接收的参数是负数时，slice会将它字符串的长度与对应的负数相加，结果作为参数。如果仅有一个参数，则从start开始到末尾。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;HelloExample&quot;;</span><br><span class="line">console.log(str); //HelloExample</span><br><span class="line">console.log(str.slice(1, 3)); //el</span><br><span class="line">console.log(str.slice(2)); //lloExmaple</span><br><span class="line">console.log(str.slice(3, 1)); //空字符串</span><br><span class="line">console.log(str.slice(-4, -1)); //mpl</span><br><span class="line">console.log(str.slice(-4, 0)); //空字符串</span><br><span class="line">console.log(str.slice(-1, -4)); //空字符串</span><br><span class="line">console.log(str.slice(1, -4)); //elloExa</span><br></pre></td></tr></table></figure><p>9.<strong>toLowerCase()</strong> – 将整个字符串转成小写字母。<br>toLowerCase() – 将整个字符串转成小写字母。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;How Are you&quot;;</span><br><span class="line">console.log(str.toLowerCase()); //how are you</span><br><span class="line">console.log(str.toUpperCase()); //HOW ARE YOU</span><br></pre></td></tr></table></figure><p>10.<strong>stringObject.split(separator,howmany)</strong>,返回一个字符串数组。该数组是通过在 separator 指定的边界处将字符串 stringObject 分割成子串创建的。返回的数组中的字串不包括 separator 自身。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;How are you doing today&quot;;</span><br><span class="line">console.log(str.split(&quot; &quot;)); //[&quot;How&quot;, &quot;are&quot;, &quot;you&quot;, &quot;doing&quot;, &quot;today&quot;]</span><br><span class="line">console.log(str); //How are you doing today</span><br><span class="line">console.log(str.split(&quot;&quot;)); //[&quot;H&quot;, &quot;o&quot;, &quot;w&quot;, &quot; &quot;, &quot;a&quot;, &quot;r&quot;, &quot;e&quot;, &quot; &quot;, &quot;y&quot;, &quot;o&quot;, &quot;u&quot;, &quot; &quot;, &quot;d&quot;, &quot;o&quot;, &quot;i&quot;, &quot;n&quot;, &quot;g&quot;, &quot; &quot;, &quot;t&quot;, &quot;o&quot;, &quot;d&quot;, &quot;a&quot;, &quot;y&quot;] </span><br><span class="line">console.log(str.split(&quot;&quot;, 3)); //[&quot;H&quot;, &quot;o&quot;, &quot;w&quot;]</span><br><span class="line">console.log(str.split(&quot;a&quot;)); //[&quot;How &quot;, &quot;re you doing tod&quot;, &quot;y&quot;]</span><br><span class="line">console.log(str.split(&quot;good&quot;)); //[&quot;How are you doing today&quot;]</span><br><span class="line">var str = &quot;a_db-c(d+e&quot;;</span><br><span class="line">console.log(str.split(/[^a-z]/i)); //[&quot;a&quot;, &quot;db&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]</span><br></pre></td></tr></table></figure><p>11.match(searchvalue) 或 match(regexp)检查一个字符串是否匹配一个正则表达式。返回存放匹配结果的数组。<br>    match() 方法将检索字符串 stringObject，以找到一个或多个与 regexp 匹配的文本。这个方法的行为在很大程度上有赖于 regexp 是否具有标志 g。<br>    如果 regexp 没有标志 g，那么 match() 方法就只能在 stringObject 中执行一次匹配。如果没有找到任何匹配的文本， match() 将返回 null。否则，它将返回一个数组，其中存放了与它找到的匹配文本有关的信息。该数组的第 0 个元素存放的是匹配文本，而其余的元素存放的是与正则表达式的子表达式匹配的文本。除了这些常规的数组元素之外，返回的数组还含有两个对象属性。index 属性声明的是匹配文本的起始字符在 stringObject 中的位置，input 属性声明的是对 stringObject 的引用。<br>    如果 regexp 具有标志 g，则 match() 方法将执行全局检索，找到 stringObject 中的所有匹配子字符串。若没有找到任何匹配的子串，则返回 null。如果找到了一个或多个匹配子串，则返回一个数组。不过全局匹配返回的数组的内容与前者大不相同，它的数组元素中存放的是 stringObject 中所有的匹配子串，而且也没有 index 属性或 input 属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;Hello world! Hello&quot;;</span><br><span class="line">console.log(str.match(&quot;lo&quot;)); //[&quot;lo&quot;] &#123; index: 3, input: &quot;Hello world! Hello&quot; &#125;</span><br><span class="line">console.log(str.match(&quot;world&quot;)); //[&quot;world&quot;] &#123; index: 6, input: &quot;Hello world! Hello&quot; &#125;</span><br><span class="line">console.log(str.match(&quot;world&quot;).index); //6</span><br><span class="line">console.log(str.match(/Hello/g)); //[&quot;Hello&quot;, &quot;Hello&quot;]</span><br><span class="line">console.log(str.match(&quot;World&quot;)); //null</span><br><span class="line">var str = &quot;1 plus 2 equal 3&quot;;</span><br><span class="line">console.log(str.match(/\d+/g)); //[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]</span><br></pre></td></tr></table></figure><p>12.<strong>replace()</strong> 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。<br>    //stringObject.replace(regexp/substr,replacement),返回一个新的字符串，是用 replacement 替换了 regexp 的第一次匹配或所有匹配之后得到的。<br>    //replacement 可以是字符串，也可以是函数。如果它是字符串，那么每个匹配都将由字符串替换。但是 replacement 中的 $ 字符具有特定的含义，它说明从模式匹配得到的字符串将用于替换。<br>    //  $1、$2、…、$99—-与 regexp 中的第 1 到第 99 个子表达式相匹配的文本。<br>    //  $&amp;——————与 regexp 相匹配的子串。<br>    //  $`——————位于匹配子串左侧的文本。<br>    //  $’——————位于匹配子串右侧的文本。<br>    //  $$——————直接量符号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;Visit HangZhou&quot;;</span><br><span class="line">console.log(str); //Visit HangZhou</span><br><span class="line">console.log(str.replace(/Hang/g, &quot;Su&quot;)); //Visit SuZhou</span><br><span class="line">var str = &quot;1 plus 2 equal 3&quot;;</span><br><span class="line">console.log(str); //1 plus 2 equal 3</span><br><span class="line">console.log(str.replace(/(\d)/g, &quot;*&quot;));  //* plus * equal *</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;as An angle&quot;;</span><br><span class="line">console.log(str.replace(/a/, &quot;b&quot;)); //bs An angle</span><br><span class="line">console.log(str.replace(/a/g, &quot;b&quot;)); //bs An bngle</span><br><span class="line">console.log(str.replace(/a/gi, &quot;b&quot;)); //bs bn angle</span><br><span class="line"></span><br><span class="line">var str = &quot;Karl,John&quot;;</span><br><span class="line">console.log(str.replace(/(\w+)\s*,\s*(\w+)/, &quot;$2,$1&quot;)); //John,Karl</span><br><span class="line"></span><br><span class="line">var str = &apos;&quot;ab&quot;, &quot;b&quot;&apos;;</span><br><span class="line">console.log(str.replace(/&quot;([^&quot;]*)&quot;/g, &quot;&apos;$1&apos;&quot;)); //&apos;ab&apos;, &apos;b&apos; </span><br><span class="line"></span><br><span class="line">var str = &quot;aaa bbb ccc&quot;;</span><br><span class="line">console.log(str.replace(/\b\w+\b/g, function (w) &#123;</span><br><span class="line">        return w.substring(0, 1).toUpperCase() + w.substring(1);</span><br><span class="line">    &#125;)); //Aaa Bbb Ccc</span><br></pre></td></tr></table></figure><p>13.search() – 执行一个正则表达式匹配查找。如果查找成功，返回字符串中匹配的索引值。否则返回 -1 。<br>stringObject.search(regexp) 返回stringObject 中第一个与 regexp 相匹配的子串的起始位置。<br>此方法跟indexOf类似。此方法会忽略g标识<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;Visit HangZhou&quot;;</span><br><span class="line">console.log(str) //Visit HangZhou</span><br><span class="line">console.log(str.search(/Hang/)); //6</span><br><span class="line">console.log(str.search(/hang/)); //-1</span><br><span class="line">console.log(str.search(/hang/i)); //6</span><br><span class="line">var str = &quot;1 plus 2 equal 3&quot;;</span><br><span class="line">console.log(str) //1 plus 2 equal 3console.log(str.search(/\d/g)); //0</span><br></pre></td></tr></table></figure></p><p>14.附加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(str.toLowerCase());//hello world </span><br><span class="line">console.log(str.toUpperCase());//HELLO</span><br></pre></td></tr></table></figure><p>/<em><br>  match方法：只接受一个参数，由字符串或RegExp对象指定的一个正则表达式<br>  search方法：只接受一个参数，由字符串或RegExp对象指定的一个正则表达式<br>  search方法返回字符串中第一个匹配项的索引，如果没有匹配项，返回-1    </em>/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var str=&quot;cat,bat,sat,fat&quot;; </span><br><span class="line">  var pattern=/.at/; </span><br><span class="line">  var matches=str.match(pattern); </span><br><span class="line">  console.log(matches.index);//0 </span><br><span class="line">  console.log(matches[0]);//cat </span><br><span class="line">  console.log(pattern.lastIndex);//0 </span><br><span class="line">  //lastIndex表示开始搜索下一个匹配项的字符位置，从0算起 </span><br><span class="line">  var pos=str.search(/at/); </span><br><span class="line">  console.log(pos);//1， 1表示at字符串在原来字符串中第一次出现的位置</span><br></pre></td></tr></table></figure><p>几个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">1.字符串去重:</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt; </span><br><span class="line">&lt;html lang=&quot;en&quot;&gt; </span><br><span class="line">  &lt;head&gt; </span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt; </span><br><span class="line">    &lt;title&gt;字符串去重&lt;/title&gt; </span><br><span class="line">  &lt;/head&gt; </span><br><span class="line">  &lt;body&gt; </span><br><span class="line">  &lt;script type=&quot;text/javascript&quot;&gt; </span><br><span class="line">  //String.split() 执行的操作与 Array.join 执行的操作是相反的 </span><br><span class="line">  //split() 方法用于把一个字符串分割成字符串数组。 </span><br><span class="line">  //join方法用于将字符串数组连接成一个字符串 </span><br><span class="line">  //如果把空字符串 (&quot;&quot;) 用作 separator，那么 stringObject 中的每个字符之间都会被分割。 </span><br><span class="line">    var str=&quot;aahhgggsssjjj&quot;;//这里字符串没有可以分隔的字符，所以需要使用空字符串作为分隔符 </span><br><span class="line">    function unique(msg)&#123; </span><br><span class="line">      var res=[]; </span><br><span class="line">      var arr=msg.split(&quot;&quot;); </span><br><span class="line">      //console.log(arr); </span><br><span class="line">      for(var i=0;i&lt;arr.length;i++)&#123; </span><br><span class="line">        if(res.indexOf(arr[i])==-1)&#123; </span><br><span class="line">          res.push(arr[i]); </span><br><span class="line">        &#125; </span><br><span class="line">      &#125; </span><br><span class="line">      return res.join(&quot;&quot;); </span><br><span class="line">    &#125; </span><br><span class="line">    console.log(unique(str));//ahgsj </span><br><span class="line">  &lt;/script&gt; </span><br><span class="line">  &lt;/body&gt; </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">2.判断字符串中字符出现的次数</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt; </span><br><span class="line">&lt;html lang=&quot;en&quot;&gt; </span><br><span class="line">  &lt;head&gt; </span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt; </span><br><span class="line">    &lt;title&gt;字符串操作&lt;/title&gt; </span><br><span class="line">  &lt;/head&gt; </span><br><span class="line">  &lt;body&gt; </span><br><span class="line">  &lt;script type=&quot;text/javascript&quot;&gt; </span><br><span class="line">  /* </span><br><span class="line">  1.先实现字符串去重 </span><br><span class="line">  2.然后对去重后的数组用for循环操作，分别与原始数组中各个值进行比较，如果相等则count++,循环结束将count保存在sum数组中，然后将count重置为0 </span><br><span class="line">  3.这样一来去重后的数组中的元素在原数组中出现的次数与sum数组中的元素是一一对应的 </span><br><span class="line">   */</span><br><span class="line">    var str=&quot;aacccbbeeeddd&quot;; </span><br><span class="line">    var sum=[]; </span><br><span class="line">    var res=[]; </span><br><span class="line">    var count=0; </span><br><span class="line">    var arr=str.split(&quot;&quot;); </span><br><span class="line">    for(var i=0;i&lt;arr.length;i++)&#123; </span><br><span class="line">      if(res.indexOf(arr[i])==-1)&#123; </span><br><span class="line">        res.push(arr[i]); </span><br><span class="line">      &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    for(var i=0;i&lt;res.length;i++)&#123; </span><br><span class="line">      for(var j=0;j&lt;arr.length;j++)&#123; </span><br><span class="line">        if(arr[j]==res[i])&#123; </span><br><span class="line">          count++; </span><br><span class="line">        &#125; </span><br><span class="line">      &#125; </span><br><span class="line">      sum.push(count); </span><br><span class="line">      count=0; </span><br><span class="line">    &#125; </span><br><span class="line">    console.log(res);//[&quot;a&quot;, &quot;c&quot;, &quot;b&quot;, &quot;e&quot;, &quot;d&quot;] </span><br><span class="line">    for(var i=0;i&lt;res.length;i++)&#123; </span><br><span class="line">      var str=(sum[i]%2==0)?&quot;偶数&quot;:&quot;奇数&quot;; </span><br><span class="line">      console.log(res[i]+&quot;出现了&quot;+sum[i]+&quot;次&quot;); </span><br><span class="line">      console.log(res[i]+&quot;出现了&quot;+str+&quot;次&quot;); </span><br><span class="line">    &#125; </span><br><span class="line">  &lt;/script&gt; </span><br><span class="line">  &lt;/body&gt; </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3.阿里面试-字符串操作</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt; </span><br><span class="line">  var str = &quot;www.taobao.com&quot;; </span><br><span class="line">  var res = str.split(&quot;&quot;).reverse().join(&quot;&quot;).replace(&apos;oat&apos;,&apos;&apos;); </span><br><span class="line">  console.log(res);//moc.oab.www </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.concat() – 将两个或多个字符的文本组合起来，返回一个新的字符串&lt;/p&gt;
&lt;p&gt;result=s1+s2+…+s&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa
      
    
    </summary>
    
      <category term="js总结" scheme="https://vipxu.github.io/categories/js%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="js" scheme="https://vipxu.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>数组常用方法</title>
    <link href="https://vipxu.github.io/2018/06/03/Array%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>https://vipxu.github.io/2018/06/03/Array数组常用操作/</id>
    <published>2018-06-03T07:46:01.000Z</published>
    <updated>2018-06-08T11:05:53.948Z</updated>
    
    <content type="html"><![CDATA[<p> 1.shift:删除原数组的第一项，返回删除元素的值；如果数组为空则返回undefined</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4, 5];</span><br><span class="line">var out = arr.shift();</span><br><span class="line">console.log(arr); //[2,3,4,5]</span><br><span class="line">console.log(out); //1</span><br><span class="line">var arr = [];</span><br><span class="line">var out = arr.shift();</span><br><span class="line">console.log(arr); //[]</span><br><span class="line">console.log(out); //undefined</span><br></pre></td></tr></table></figure><p>2.unshift:将参数添加到原数组开头，返回数组的长度(ie6下返回undefined)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2];</span><br><span class="line">var out = arr.unshift(-1, 0);</span><br><span class="line">console.log(arr); //[-1,0,1,2]</span><br><span class="line">console.log(out); //4</span><br></pre></td></tr></table></figure><p>3.pop:删除原数组的最后一项，返回数组删除的值；如果数组为空则返回undefined</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4, 5];</span><br><span class="line">var out = arr.pop();</span><br><span class="line">console.log(arr); //[1,2,3,4]</span><br><span class="line">console.log(out); //5</span><br><span class="line">var arr = [];</span><br><span class="line">var out = arr.pop();</span><br><span class="line">console.log(arr); //[]</span><br><span class="line">console.log(out); //undefined</span><br></pre></td></tr></table></figure><p>4.push:将参数添加到原数组的末尾，返回数组的长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3];</span><br><span class="line">var out = arr.push(4, 5, 6);</span><br><span class="line">console.log(arr); //[1,2,3,4,5,6]</span><br><span class="line">console.log(out); //6</span><br></pre></td></tr></table></figure><p>5.concat:返回一个将参数添加到原数组中构成的新数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3];</span><br><span class="line">var out = arr.concat(4, 5);</span><br><span class="line">console.log(arr); //[1,2,3]</span><br><span class="line">console.log(out); //[1,2,3,4,5]</span><br></pre></td></tr></table></figure><p>6.splice(start,deleteCount,val1,val2,…):从start位置开始删除原数组deleteCount项，并从该位置起插入val1,val2,…，返回删除的项组成的新数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4, 5];</span><br><span class="line">var out = arr.splice(2, 2, 7, 8, 9, 10);</span><br><span class="line">console.log(arr); //[1,2,7,8,9,10,5]</span><br><span class="line">console.log(out); //[3,4]</span><br></pre></td></tr></table></figure><pre><code>//在清空数组时仅需传递start，如果不删除所有元素，再传递deleteCountvar arr = [1, 2, 3, 4, 5];var out = arr.splice(2);console.log(arr); //[1,2]console.log(out); //[3,4,5]//同shiftvar arr = [1, 2, 3, 4, 5];var out = arr.splice(0, 1);console.log(arr); //[2,3,4,5]console.log(out); //[1]//同unshiftvar arr = [1, 2, 3, 4, 5];var out = arr.splice(0, 0, 22, -1, 0);console.log(arr); //[22,-1,0,1,2,3,4,5]console.log(out); //[]//同popvar arr = [1, 2, 3, 4, 5];var out = arr.splice(arr.length - 1, 1);console.log(arr); //[1,2,3,4]console.log(out); //[5]//同pushvar arr = [1, 2, 3, 4, 5];var out = arr.splice(arr.length, 0, 6, 7, 8);console.log(arr); //[1,2,3,4,5,6,7,8]console.log(out); //[]</code></pre><p>7.reverse:将原数组倒序；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&apos;a&apos;, 1, &#123;&#125;, [2, 3]];</span><br><span class="line">console.log(arr); //[&apos;a&apos;, 1, &#123;&#125;, [2, 3]]</span><br><span class="line">var out = arr.reverse();</span><br><span class="line">console.log(arr); //[[2,3],&#123;&#125;,1,&apos;a&apos;]</span><br><span class="line">console.log(out); //[[2,3],&#123;&#125;,1,&apos;a&apos;]</span><br><span class="line">var arr = [0, 1, 5, 10, 15];</span><br><span class="line">arr.reverse();</span><br><span class="line">console.log(arr); //[15,10,5,1,0]</span><br><span class="line">var arr = [1, 0, 5, 15, 10];</span><br><span class="line">arr.reverse();</span><br><span class="line">console.log(arr); //[10,15,5,0,1]</span><br></pre></td></tr></table></figure><p>8.sort(orderfunction):sort()为升序排列，但是先调用每个数组项的toString()方法，然后比较字符串来排序，是按ASCII进行比较的；<br>    //所以跟reverse不同原理不同。sort()不带参数的时候是从字面上对数组排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var arr = [0, 1, 5, 10, 15];</span><br><span class="line">arr.sort();</span><br><span class="line">console.log(arr); //0,1,10,15,5 ,注意这里是字符串按ASCII进行比较的</span><br><span class="line">    //调用这样的函数就按数值方式排列了</span><br><span class="line">function sortNumber(a, b) &#123;</span><br><span class="line">        return a - b</span><br><span class="line">    &#125;</span><br><span class="line">arr.sort(sortNumber);</span><br><span class="line">console.log(arr);   //0,1,5,10,15</span><br></pre></td></tr></table></figure><p>9.slice(start,end):返回从原数组中指定start到end(不包含该元素)之间的项组成的新数组,如只有一个参数，则从start到数组末尾</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4, 5, 6, 7, 8];</span><br><span class="line">var out = arr.slice(2,3);</span><br><span class="line">console.log(arr); //[1, 2, 3, 4, 5, 6, 7, 8]</span><br><span class="line">console.log(out); //[3]</span><br></pre></td></tr></table></figure><p>10.join(separator):将数组的元素组成一个字符串，以separator为分隔符，省略的话则用默认用逗号为分隔符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4, 5, 6];</span><br><span class="line">var out = arr.join();</span><br><span class="line">console.log(arr); //[1, 2, 3, 4, 5, 6]</span><br><span class="line">console.log(out); //1,2,3,4,5,6</span><br><span class="line">out = arr.join(&quot;&quot;);</span><br><span class="line">console.log(out); //123456</span><br><span class="line">out = arr.join(&quot;&amp;&quot;);</span><br><span class="line">console.log(out); //1&amp;2&amp;3&amp;4&amp;5&amp;6</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 1.shift:删除原数组的第一项，返回删除元素的值；如果数组为空则返回undefined&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;
      
    
    </summary>
    
      <category term="js总结" scheme="https://vipxu.github.io/categories/js%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="js" scheme="https://vipxu.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>组件通信</title>
    <link href="https://vipxu.github.io/2018/06/03/%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    <id>https://vipxu.github.io/2018/06/03/组件通信/</id>
    <published>2018-06-03T07:46:01.000Z</published>
    <updated>2018-06-10T04:12:37.669Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-父子组件的通信"><a href="#1-父子组件的通信" class="headerlink" title="1.父子组件的通信"></a>1.父子组件的通信</h4><p>子组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;我是个子组件&lt;/div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;(item, index) in girls&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">                &#123;&#123; item.name &#125;&#125; - &#123;&#123; item.age &#125;&#125;</span><br><span class="line">                &lt;button @click=&quot;noticeGroup(item.name,item.age)&quot;&gt;发送消息&lt;/button&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;div&gt;接收来自父组件的消息:&#123;&#123; noticeGirl &#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    girls: &#123;</span><br><span class="line">      type: Array,</span><br><span class="line">      required: true</span><br><span class="line">    &#125;,</span><br><span class="line">    noticeGirl: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      required: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    noticeGroup(name, age) &#123;</span><br><span class="line">      this.$emit(&quot;introduce&quot;, &#123;</span><br><span class="line">        name: name,</span><br><span class="line">        age: age</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    test()&#123;</span><br><span class="line">      console.log(&apos;test&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>父组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;p&gt;我是父组建&lt;/p&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123;&#123; somebody &#125;&#125; : &#123;&#123; age &#125;&#125; 岁了。</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;girl-group ref=&quot;child&quot; :girls=&quot;aGirls&quot; :noticeGirl=&quot;noticeGirl&quot; @introduce=&quot;introduceSelf&quot;&gt;&lt;/girl-group&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import girlGroup from &quot;@/components/child&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    girlGroup</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      aGirls: [</span><br><span class="line">        &#123;</span><br><span class="line">          name: &quot;小丽&quot;,</span><br><span class="line">          age: 22</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: &quot;小美&quot;,</span><br><span class="line">          age: 21</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: &quot;小荷&quot;,</span><br><span class="line">          age: 24</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      somebody: &quot;&quot;,</span><br><span class="line">      age: &quot;&quot;,</span><br><span class="line">      noticeGirl: &quot;&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted()&#123;</span><br><span class="line">    this.$refs.child.test();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    introduceSelf(opt) &#123;</span><br><span class="line">      this.somebody = opt.name;</span><br><span class="line">      this.age = opt.age;</span><br><span class="line">      // 通知girl收到消息</span><br><span class="line">      this.noticeGirl = opt.name + &quot;,已收到消息&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2.非父子组件通信</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;on&quot;&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Bus from &quot;@/assets/js/hub.js&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &quot;&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    Bus.$on(&quot;msg&quot;, (e) =&gt; &#123;</span><br><span class="line">      this.message = e;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;emit&quot;&gt;</span><br><span class="line">        &lt;button @click=&quot;bus&quot;&gt;按钮&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Bus from &quot;@/assets/js/hub.js&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &quot;&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    bus() &#123;</span><br><span class="line">      Bus.$emit(&quot;msg&quot;, &quot;我要传给兄弟组件们，你收到没有&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>需要的事件中转站hub.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">export default new Vue</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-父子组件的通信&quot;&gt;&lt;a href=&quot;#1-父子组件的通信&quot; class=&quot;headerlink&quot; title=&quot;1.父子组件的通信&quot;&gt;&lt;/a&gt;1.父子组件的通信&lt;/h4&gt;&lt;p&gt;子组件：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="vue组件总结" scheme="https://vipxu.github.io/categories/vue%E7%BB%84%E4%BB%B6%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="vue" scheme="https://vipxu.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Flex的使用</title>
    <link href="https://vipxu.github.io/2017/06/05/flex%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://vipxu.github.io/2017/06/05/flex的使用/</id>
    <published>2017-06-05T07:46:01.000Z</published>
    <updated>2018-06-05T09:47:22.852Z</updated>
    
    <content type="html"><![CDATA[<h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h2><h4 id="1-flex-direction-决定主轴的方向（即项目的排列方向）。"><a href="#1-flex-direction-决定主轴的方向（即项目的排列方向）。" class="headerlink" title="1. flex-direction:决定主轴的方向（即项目的排列方向）。"></a>1. flex-direction:决定主轴的方向（即项目的排列方向）。</h4><ul><li>row（默认值）：主轴为水平方向，起点在左端。</li><li>row-reverse：主轴为水平方向，起点在右端。</li><li>column：主轴为垂直方向，起点在上沿。</li><li>column-reverse：主轴为垂直方向，起点在下沿</li></ul><h4 id="2-flex-wrap-排序方式"><a href="#2-flex-wrap-排序方式" class="headerlink" title="2. flex-wrap:排序方式"></a>2. flex-wrap:排序方式</h4><ul><li>nowrap（默认）：不换行。</li><li>wrap 换行，第一行在上方。</li><li>wrap-reverse：换行，第一行在下方。</li></ul><h4 id="3-flex-flow-flex-direction-flex-wrap-默认row-nowrap"><a href="#3-flex-flow-flex-direction-flex-wrap-默认row-nowrap" class="headerlink" title="3. flex-flow:flex-direction||flex-wrap 默认row nowrap"></a>3. flex-flow:flex-direction||flex-wrap 默认row nowrap</h4><h4 id="4-justify-content-定义了项目在主轴上的对齐方式。"><a href="#4-justify-content-定义了项目在主轴上的对齐方式。" class="headerlink" title="4. justify-content:定义了项目在主轴上的对齐方式。"></a>4. justify-content:定义了项目在主轴上的对齐方式。</h4><ul><li>flex-start（默认值）：左对齐</li><li>flex-end：右对齐</li><li>center： 居中</li><li>space-between：两端对齐，项目之间的间隔都相等。</li><li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul><h4 id="5-align-items属性定义项目在交叉轴上如何对齐。"><a href="#5-align-items属性定义项目在交叉轴上如何对齐。" class="headerlink" title="5. align-items属性定义项目在交叉轴上如何对齐。"></a>5. align-items属性定义项目在交叉轴上如何对齐。</h4><ul><li>flex-start：交叉轴的起点对齐。</li><li>flex-end：交叉轴的终点对齐。</li><li>center：交叉轴的中点对齐。</li><li>baseline: 项目的第一行文字的基线对齐。</li><li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul><h4 id="6-align-content定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。"><a href="#6-align-content定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。" class="headerlink" title="6. align-content定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。"></a>6. align-content定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</h4><ul><li>flex-start：与交叉轴的起点对齐。</li><li>flex-end：与交叉轴的终点对齐。</li><li>center：与交叉轴的中点对齐。</li><li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li>stretch（默认值）：轴线占满整个交叉轴。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;flex布局&quot;&gt;&lt;a href=&quot;#flex布局&quot; class=&quot;headerlink&quot; title=&quot;flex布局&quot;&gt;&lt;/a&gt;flex布局&lt;/h2&gt;&lt;h4 id=&quot;1-flex-direction-决定主轴的方向（即项目的排列方向）。&quot;&gt;&lt;a href=&quot;#1-
      
    
    </summary>
    
      <category term="css总结" scheme="https://vipxu.github.io/categories/css%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="css" scheme="https://vipxu.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>红尘不坠，回望彼岸风景</title>
    <link href="https://vipxu.github.io/2016/10/05/%E7%BA%A2%E5%B0%98%E4%B8%8D%E5%9D%A0%EF%BC%8C%E5%9B%9E%E6%9C%9B%E5%BD%BC%E5%B2%B8%E9%A3%8E%E6%99%AF/"/>
    <id>https://vipxu.github.io/2016/10/05/红尘不坠，回望彼岸风景/</id>
    <published>2016-10-05T09:32:27.000Z</published>
    <updated>2018-06-05T09:33:56.324Z</updated>
    
    <content type="html"><![CDATA[<p>中秋午后的那场雨，来得并不突然，也许是在之前的几天，就开始酝酿了吧。<br>在每一个秋天，我总是期待着一场大雨，淋漓尽致地大雨，可以让人遗忘曾经的过往。 静夜独处时，情绪低落时，我时常问自己：人，活着是为了什么？又为什么而活着？是为了让我去感受我不曾感受的快乐，感受我不曾体会的悲伤，不辜负平淡的生活，平凡的生命？让我去经受生命中磨砺，让我能够等待下一个季节的轮回？也许我是个太容易被感动的人，我总是一千次一万次的告诉自己，我可以用一个微笑的距离远离一个季节的轮回！岁月不留痕，就让它留下一些回忆，浅浅的，淡淡的，是一种遗憾！</p><p>秋夜的雨飘落，淋湿了路面，昏暗的灯光下，思绪在蔓延。曾经的人、曾经的事，在幽幽的黑暗中向你袭来。岁月的脚步让我的心情温润如水，也许有岁月的磨砺下，才懂得了情感的珍藏！云卷云舒，花开花落。记住了一些人、一些事，在我的世界了划过了一道美丽的音符。<br>过往的岁月，因为走过，所以没有了起点；因为懂得，所以学会了珍惜；因为有了牵挂，所以不会轻易忘记；因为有了感动，所以学会了怀念！平凡的你我，在平淡的生活中，又在期待些什么？<br>红尘回望，陌生中有一种熟悉的味道，我突然会想起幸福。也许就是还有那么一个人，站在一个遥远的地方，憧憬着。在你心中泛起一丝失落的时候，他也刚好在这样的夜里想起你，想你在这样的夜晚是否已经安然入睡。<br>雨后的天空，干净的街道，微风扑面而来，那丝清凉让人不禁打了个冷颤。走在路上，可以一步一步的丈量每一个地点的距离，可是，却丈量不出心与心之间的距离，也丈量不出坦然与逃避之间的距离。散发出橘色的光晕的路灯下，夜清凉，树朦胧，影斑驳，人稀少，倚着路边的栏杆，遥望远处的风景，有种心醉的美丽，走近了，才看清了，不过是每天都可以看见得再普通不过的路灯，也许，很多风景，永远只适合隔岸远望，由距离的遥远而变得生动。<br>“不识庐山真面目，只缘身在此山中”，远远的观望，伸手就可以触碰，原来有如此大的不同。远远的欣赏，得到的是一种淡然的快乐，是放得下得超脱；欲望的掠取，得到的是一种真实的感知，是贪婪的满足，是快乐后的失落！<br>最美的风景总是在河边，风景似乎有了水的装点才会显得有灵气，缺了水即使再美的景，也是欠缺的。对于我来讲，我喜欢有水的城市，我爱水胜过爱山，有了水的城市，多了灵动，多了停留，一个城市，会因为有了水的流动，而焕发出勃勃生机。也许，一场大雨，可以让浮躁的心渐渐平静，生活本来就是这样，需要在平凡中偶尔停留片刻，调整一下杂乱的步伐；一场大雨，清晰了熟悉的风景和凌乱的思绪！<br>也许，生活中有很多东西，真的只适合远远的欣赏，却不适合真实的得到，经历过岁月的沧桑，我们才能够明白得不到的永远是最好的，是因为是装在心里。<br>也许，拥有一段友情远比拥有一段感情要真实许多，温暖许多，也许是相望的距离，是珍藏心中的那些记忆，让你拥有更多平实的快乐！把握好眼前得到的，珍惜你能够拥有的，也许，生活就会平静许多，幸福许多！<br>一场金秋雨，让彼岸风景渐远，这雨，清澈了雨后的街道，也让人遗忘了关于这个季节所有的记忆。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;中秋午后的那场雨，来得并不突然，也许是在之前的几天，就开始酝酿了吧。&lt;br&gt;在每一个秋天，我总是期待着一场大雨，淋漓尽致地大雨，可以让人遗忘曾经的过往。 静夜独处时，情绪低落时，我时常问自己：人，活着是为了什么？又为什么而活着？是为了让我去感受我不曾感受的快乐，感受我不曾体
      
    
    </summary>
    
      <category term="随笔" scheme="https://vipxu.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://vipxu.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
